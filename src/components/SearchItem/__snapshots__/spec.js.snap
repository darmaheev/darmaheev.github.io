// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renders searchItem with default props 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <SearchItem
    pokemon={
      Object {
        "abilities": Array [],
        "name": "",
        "sprites": Object {
          "front_default": "",
        },
        "stats": Array [],
        "types": Array [],
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": Array [
        <ForwardRef
          src=""
        />,
        <ForwardRef>
          <ForwardRef>
            
          </ForwardRef>
          <ForwardRef>
            
          </ForwardRef>
          <TagList
            tags={Array []}
          />
          <StatList
            stats={Array []}
          />
        </ForwardRef>,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "src": "",
        },
        "ref": null,
        "rendered": null,
        "type": Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-htoDjs",
            "isStatic": false,
            "rules": Array [
              "
  align-self: center;
  width: 200px;
  height: 200px;
  background: url(",
              [Function],
              ") no-repeat;
  background-size: cover;
",
            ],
          },
          "displayName": "styled.div",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-htoDjs",
          "target": "div",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        },
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": Array [
            <ForwardRef>
              
            </ForwardRef>,
            <ForwardRef>
              
            </ForwardRef>,
            <TagList
              tags={Array []}
            />,
            <StatList
              stats={Array []}
            />,
          ],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": "",
            },
            "ref": null,
            "rendered": "",
            "type": Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-iwsKbI",
                "isStatic": true,
                "rules": Array [
                  "
  font-size: 18px;
  color: #202020;
  font-weight: 700;
  cursor: pointer;
  margin-bottom: 9px;
  text-transform: uppercase;
",
                ],
              },
              "displayName": "styled.span",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "sc-iwsKbI",
              "target": "span",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            },
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": "",
            },
            "ref": null,
            "rendered": "",
            "type": Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-gZMcBi",
                "isStatic": true,
                "rules": Array [
                  "
  font-size: 12px;
  line-height: 18px;
  color: #202020;
  font-weight: 400;
  margin-bottom: 15px;
",
                ],
              },
              "displayName": "styled.span",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "sc-gZMcBi",
              "target": "span",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            },
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "handleDelete": undefined,
              "tags": Array [],
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "stats": Array [],
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-dnqmqq",
            "isStatic": true,
            "rules": Array [
              "
  display: flex;
  flex: 1;
  flex-direction: column;
  padding: 25px;
  text-align: center;
",
            ],
          },
          "displayName": "styled.div",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-dnqmqq",
          "target": "div",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        },
      },
    ],
    "type": Object {
      "$$typeof": Symbol(react.forward_ref),
      "attrs": Array [],
      "componentStyle": ComponentStyle {
        "componentId": "sc-gzVnrw",
        "isStatic": true,
        "rules": Array [
          "
  display: flex;
  position: relative;
  cursor: pointer;
  min-height: 200px;
  max-width: 500px;
  flex-direction: row;
  flex-wrap: wrap; 
  justify-content: center;
  background-color: #ffffff;
  margin: 8px 15px;
  border: 1px solid #f0f0f0;
  box-shadow: 0px 5px 15px rgba(0, 0, 0, 0.05);
  border-radius: 8px;
  overflow: hidden;
  top: 0px;
  transition-property: top, box-shadow;
  transition-duration: 0.3s;
  transition-timing-function: ease-in-out;
  z-index: 0;
  &:hover {
    top: -5px;
    box-shadow: 0px 25px 25px rgba(0, 0, 0, 0.326398);
  }  
",
        ],
      },
      "displayName": "styled.div",
      "foldedComponentIds": Array [],
      "render": [Function],
      "styledComponentId": "sc-gzVnrw",
      "target": "div",
      "toString": [Function],
      "warnTooManyClasses": [Function],
      "withComponent": [Function],
    },
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          <ForwardRef
            src=""
          />,
          <ForwardRef>
            <ForwardRef>
              
            </ForwardRef>
            <ForwardRef>
              
            </ForwardRef>
            <TagList
              tags={Array []}
            />
            <StatList
              stats={Array []}
            />
          </ForwardRef>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "src": "",
          },
          "ref": null,
          "rendered": null,
          "type": Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-htoDjs",
              "isStatic": false,
              "rules": Array [
                "
  align-self: center;
  width: 200px;
  height: 200px;
  background: url(",
                [Function],
                ") no-repeat;
  background-size: cover;
",
              ],
            },
            "displayName": "styled.div",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-htoDjs",
            "target": "div",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          },
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": Array [
              <ForwardRef>
                
              </ForwardRef>,
              <ForwardRef>
                
              </ForwardRef>,
              <TagList
                tags={Array []}
              />,
              <StatList
                stats={Array []}
              />,
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": "",
              },
              "ref": null,
              "rendered": "",
              "type": Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-iwsKbI",
                  "isStatic": true,
                  "rules": Array [
                    "
  font-size: 18px;
  color: #202020;
  font-weight: 700;
  cursor: pointer;
  margin-bottom: 9px;
  text-transform: uppercase;
",
                  ],
                },
                "displayName": "styled.span",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-iwsKbI",
                "target": "span",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              },
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": "",
              },
              "ref": null,
              "rendered": "",
              "type": Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-gZMcBi",
                  "isStatic": true,
                  "rules": Array [
                    "
  font-size: 12px;
  line-height: 18px;
  color: #202020;
  font-weight: 400;
  margin-bottom: 15px;
",
                  ],
                },
                "displayName": "styled.span",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-gZMcBi",
                "target": "span",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              },
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "handleDelete": undefined,
                "tags": Array [],
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "stats": Array [],
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-dnqmqq",
              "isStatic": true,
              "rules": Array [
                "
  display: flex;
  flex: 1;
  flex-direction: column;
  padding: 25px;
  text-align: center;
",
              ],
            },
            "displayName": "styled.div",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-dnqmqq",
            "target": "div",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          },
        },
      ],
      "type": Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "sc-gzVnrw",
          "isStatic": true,
          "rules": Array [
            "
  display: flex;
  position: relative;
  cursor: pointer;
  min-height: 200px;
  max-width: 500px;
  flex-direction: row;
  flex-wrap: wrap; 
  justify-content: center;
  background-color: #ffffff;
  margin: 8px 15px;
  border: 1px solid #f0f0f0;
  box-shadow: 0px 5px 15px rgba(0, 0, 0, 0.05);
  border-radius: 8px;
  overflow: hidden;
  top: 0px;
  transition-property: top, box-shadow;
  transition-duration: 0.3s;
  transition-timing-function: ease-in-out;
  z-index: 0;
  &:hover {
    top: -5px;
    box-shadow: 0px 25px 25px rgba(0, 0, 0, 0.326398);
  }  
",
          ],
        },
        "displayName": "styled.div",
        "foldedComponentIds": Array [],
        "render": [Function],
        "styledComponentId": "sc-gzVnrw",
        "target": "div",
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      },
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
